Path: ./Makefile
Contents:
CC = gcc
CFLAGS = -Wall -Wextra -Werror -Iinclude
SRC = src/cli.c src/deque_copy.c src/deque.c src/io_file.c src/main.c src/sort.c
OBJS = $(SRC:.c=.o)
EXEC = lab3

.PHONY: all clean run  

all: $(EXEC)

$(EXEC): $(OBJS)
	$(CC) $(CFLAGS) -o $@ $^

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

clean:
	rm -f $(OBJS) $(EXEC)

run: $(EXEC)
	@./$(EXEC)
--------------------------------------------------
Path: ./chatgpt
Contents:

--------------------------------------------------
Path: ./include/deque_copy.h
Contents:
#pragma once
#include"deque.h"
#include <stdlib.h> 
#include <string.h> 

void deque_copy(deque* original_deq, deque* copy_deq);
--------------------------------------------------
Path: ./include/cli.h
Contents:
#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include "deque.h"
#include "deque_copy.h"
#include "io_file.h"
#include "sort.h"
#pragma once


void user_client();
--------------------------------------------------
Path: ./include/io_file.h
Contents:
#pragma once
#include"deque.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>


bool read_deque_from_file(char* filename, deque* deq);
void write_deque_to_file(char* filename, deque* deq);
--------------------------------------------------
Path: ./include/deque.h
Contents:
#pragma once
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<string.h>
#define CAPACITY 2

typedef struct {

    int* data;
    int size;
    int capacity;

} deque;

void create_deque(deque* deq);
bool deque_is_empty(deque* deq);
void deque_push_front(deque* deq, int value);
void deque_push_back(deque* deq, int value);
int deque_pop_front(deque* deq);
int deque_pop_back(deque* deq);
void deque_print(const deque* deq);
size_t deque_size(const deque* deq);
void destroy_deque(deque* deq);
--------------------------------------------------
Path: ./include/sort.h
Contents:
#pragma once
#include "deque.h"

void deque_quick_sort(deque* deq);
--------------------------------------------------
Path: ./files/deque.txt
Contents:
40
20
30
100
80
90
--------------------------------------------------
Path: ./src/cli.c
Contents:
#include "../include/cli.h"
#include <stdlib.h>
#include <string.h>

void user_client() {
    deque* deq = NULL; 
    deque* copy_deq = NULL; 
    char input[256];
    
    printf("Allowed commands:\n"
           "  create                - create deque\n"
           "  destroy               - destroy deque\n"
           "  is_empty              - check if deque is empty\n"
           "  push_front <value>    - add to front\n"
           "  push_back <value>     - add to back\n"
           "  pop_front             - remove from front\n"
           "  pop_back              - remove from back\n"
           "  sort                  - sort deque\n"
           "  peek_front            - get front element\n"
           "  peek_back             - get back element\n"
           "  size                  - get deque size\n"
           "  print                 - print deque\n"
           "  load_file <file>      - load from file\n"
           "  save_to_file <file>   - save to file\n"
           "  copy_deque            - copy deque\n"
           "  exit                  - exit program\n");

    while(1) {
        printf("> ");
        fflush(stdout);
        if(!fgets(input, sizeof(input), stdin)) break;
        input[strcspn(input, "\n")] = '\0';
        
        char* cmd = strtok(input, " ");
        if(!cmd) continue;
        
        if(strcmp(cmd, "exit") == 0) {
            break;
        }
        else if(strcmp(cmd, "create") == 0) {
            if(!deq) {
                deq = malloc(sizeof(deque));
                create_deque(deq);
                printf("Deque created\n");
            } else {
                printf("Deque already exists\n");
            }
        }
        else if(strcmp(cmd, "destroy") == 0) {
            if(deq) {
                destroy_deque(deq);
                free(deq);
                deq = NULL;
                printf("Deque destroyed\n");
            } else {
                printf("Deque not exists\n");
            }
        }
        else if(strcmp(cmd, "is_empty") == 0) {
            if(deq) {
                printf("Deque is empty: %d\n", deque_is_empty(deq));
            } else {
                printf("Deque not created\n");
            }
        } 
        else if(strcmp(cmd, "push_front") == 0) {
            char* arg = strtok(NULL, " ");
            if(arg && deq) {
                int value = atoi(arg);
                deque_push_front(deq, value);
                printf("Pushed front: %d\n", value);
            } else {
                printf(deq ? "Invalid argument\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "push_back") == 0) {
            char* arg = strtok(NULL, " ");
            if(arg && deq) {
                int value = atoi(arg);
                deque_push_back(deq, value);
                printf("Pushed back: %d\n", value);
            } else {
                printf(deq ? "Invalid argument\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "pop_front") == 0) {
            if(deq && !deque_is_empty(deq)) {
                printf("Popped front: %d\n", deque_pop_front(deq));
            } else {
                printf(deq ? "Deque is empty\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "pop_back") == 0) {
            if(deq && !deque_is_empty(deq)) {
                printf("Popped back: %d\n", deque_pop_back(deq));
            } else {
                printf(deq ? "Deque is empty\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "peek_front") == 0) {
            if(deq && !deque_is_empty(deq)) {
                printf("Front element: %d\n", deq->data[0]);
            } else {
                printf(deq ? "Deque is empty\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "peek_back") == 0) {
            if(deq && !deque_is_empty(deq)) {
                printf("Back element: %d\n", deq->data[deq->size-1]);
            } else {
                printf(deq ? "Deque is empty\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "size") == 0) {
            if(deq) {
                printf("Deque size: %zu\n", deque_size(deq));
            } else {
                printf("Deque not created\n");
            }
        }
        else if(strcmp(cmd, "print") == 0) {
            if(deq && !deque_is_empty(deq)) {
                deque_print(deq);
            } else {
                printf(deq ? "Deque is empty\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "print") == 0) {
            if(deq && !deque_is_empty(deq)) {
                deque_print(deq);
            } else {
                printf(deq ? "Deque is empty\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "load_file") == 0) {
            char* filename = strtok(NULL, " ");
            if(filename && deq) {
                bool success = read_deque_from_file(filename, deq); 
                if (success) {
                    printf("Loaded from %s\n", filename);
                }
            } else {
                printf(deq ? "Invalid filename\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "save_to_file") == 0) {
            char* filename = strtok(NULL, " ");
            if(filename && deq) {
                write_deque_to_file(filename, deq);
                printf("Saved to %s\n", filename);
            } else {
                printf(deq ? "Invalid filename\n" : "Deque not created\n");
            }
        }
        else if(strcmp(cmd, "copy_deque") == 0) {
            if(deq && !deque_is_empty(deq)) {
                if (copy_deq) {
                    destroy_deque(copy_deq);
                    free(copy_deq);
                }
                copy_deq = malloc(sizeof(deque));
                create_deque(copy_deq);
                deque_copy(deq, copy_deq);
                printf("Deque copied to copy_deq\n");
            } else {
                printf(deq ? "Deque is empty\n" : "Deque not created\n");
            }
        }
        else {
            printf("Unknown command: %s\n", cmd);
        }
    }
    
    if(deq) {
        destroy_deque(deq);
        free(deq);

        if (copy_deq) {
            destroy_deque(copy_deq);
            free(copy_deq);
        }
    }
}
--------------------------------------------------
Path: ./src/deque.c
Contents:
#include "../include/deque.h"

void create_deque(deque* deq) {
    if (deq->data) {
        free(deq->data);
    }
    deq->data = malloc(CAPACITY * sizeof(int));
    deq->size = 0;
    deq->capacity = CAPACITY;
}
bool deque_is_empty(deque* deq) {

    return deq->size == 0;

};
void deque_push_front(deque* deq, int value) {
    if (deq->size >= deq->capacity) {
        deq->capacity *= 2;
        deq->data = realloc(deq->data, deq->capacity * sizeof(int));
    }
    memmove(deq->data + 1, deq->data, deq->size * sizeof(int));
    deq->data[0] = value;
    deq->size++;
}
void deque_push_back(deque* deq, int value) {
    if (deq->size >= deq->capacity) {
        deq->capacity *= 2;
        deq->data = realloc(deq->data, deq->capacity * sizeof(int));
    }
    deq->data[deq->size] = value;
    deq->size++;  
}
int deque_pop_front(deque* deq) {
    if (deque_is_empty(deq)) {
        fprintf(stderr, "Ошибка: очередь пуста!\n");
        exit(EXIT_FAILURE);
    }
    int value = deq->data[0];
    for (int i = 0; i < deq->size - 1; i++) {
        deq->data[i] = deq->data[i + 1];
    }
    deq->size--;
    return value;
}
int deque_pop_back(deque* deq) {
    
    if (deque_is_empty(deq)) {
        fprintf(stderr, "Ошибка: очередь пуста!\n");
        exit(EXIT_FAILURE);
    }
    deq->size--;
    return deq->data[deq->size];
}
void deque_print(const deque* deq) {

  for(int i = 0; i < deq->size; i++) {
    printf("%d ", deq->data[i]);
  }
  printf("\n");
};
size_t deque_size(const deque* deq) {

    return deq->size;

};
void destroy_deque(deque* deq) {
    if(deq) {
        free(deq->data);
        deq->data = NULL;
        deq->size = 0;
        deq->capacity = 0;
    }
}
--------------------------------------------------
Path: ./src/io_file.c
Contents:
#include "../include/io_file.h"

bool read_deque_from_file(char* filename, deque* deq) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        printf("File not found: %s\n", filename);
        return false;
    }

    int value;
    while (fscanf(file, "%d", &value) == 1) {
        deque_push_back(deq, value);
        printf("DEBUG: Pushed value %d\n", value);
    }

    if (ferror(file)) {
        printf("Error reading file: %s\n", filename);
        clearerr(file);
        fclose(file);
        return false;
    }

    fclose(file);
    return true;
}
void write_deque_to_file(char* filename, deque* deq) {
    FILE* file = fopen(filename, "w");
    if (!file) return;

    for (int i = 0; i < deq->size; i++) {
        fprintf(file, "%d", deq->data[i]);
        if (i < deq->size - 1) {
            fprintf(file, "\n");
        }
    }
    fclose(file);
}
--------------------------------------------------
Path: ./src/sort.c
Contents:
#include "../include/sort.h"

static void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
};
static int partition(int* arr, int low, int high) {
    int pivot = arr[(low + high) / 2]; 
    int i = low - 1;
    int j = high + 1;
    
    while (1) {
        do {
            i++;
        } while (arr[i] < pivot);
        
        do {
            j--;
        } while (arr[j] > pivot);
        
        if (i >= j) return j;
        
        swap(&arr[i], &arr[j]);
    }
}
static void quick_sort(int* arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quick_sort(arr, low, pi);
        quick_sort(arr, pi + 1, high);
    }
}
void deque_quick_sort(deque* deq) {
    if (deq->size <= 1) return;
    quick_sort(deq->data, 0, deq->size - 1);
}
--------------------------------------------------
Path: ./src/main.c
Contents:
#include"../include/cli.h"

int main() {

    user_client();
}

--------------------------------------------------
Path: ./src/deque_copy.c
Contents:
#include "../include/deque_copy.h"


void deque_copy(deque* original_deq, deque* copy_deq) {
    free(copy_deq->data);
    copy_deq->capacity = original_deq->capacity;
    copy_deq->size = original_deq->size;
    copy_deq->data = malloc(copy_deq->capacity * sizeof(int));
    memcpy(copy_deq->data, original_deq->data, copy_deq->size * sizeof(int));
}

//срздание копии дека для работы с ним
--------------------------------------------------
