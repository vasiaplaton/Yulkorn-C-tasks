diff --git a/lab3/.vscode/settings.json b/lab3/.vscode/settings.json
index 32cdffd..91ce8d9 100644
--- a/lab3/.vscode/settings.json
+++ b/lab3/.vscode/settings.json
@@ -5,6 +5,7 @@
         "cli.h": "c",
         "udt_list.h": "c",
         "stdio.h": "c",
-        "stdlib.h": "c"
+        "stdlib.h": "c",
+        "chatgpt": "c"
     }
 }
\ No newline at end of file
diff --git a/lab3/lab8/chatgpt b/lab3/lab8/chatgpt
index 90cba2b..740891e 100644
--- a/lab3/lab8/chatgpt
+++ b/lab3/lab8/chatgpt
@@ -36,6 +36,60 @@ Contents:
 
 int opPriority(char operation);
 bool opCommut(char operation);
+--------------------------------------------------
+Path: ./src/stack.c
+Contents:
+#include "stack.h"
+#include <stdlib.h>
+
+#define INITIAL_CAPACITY 16
+
+Stack createStack() {
+    Stack s = malloc(sizeof(_Stack));
+    s->capacity = INITIAL_CAPACITY;
+    s->elems    = malloc(sizeof(STACK_T) * s->capacity);
+    s->last     = 0;
+    return s;
+}
+
+void destroyStack(Stack s) {
+    free(s->elems);
+    free(s);
+}
+
+bool emptyStack(Stack s) {
+    return s->last == 0;
+}
+
+int depthStack(Stack s) {
+    return s->last;
+}
+
+void pushStack(Stack s, STACK_T t) {
+    if (s->last == s->capacity) {
+        int newCap = s->capacity * 2;
+        STACK_T *newArr = malloc(sizeof(STACK_T) * newCap);
+        for (int i = 0; i < s->capacity; i++) {
+            newArr[i] = s->elems[i];
+        }
+        free(s->elems);
+        s->elems    = newArr;
+        s->capacity = newCap;
+    }
+    s->elems[s->last++] = t;
+}
+
+STACK_T topStack(Stack s) {
+    if (emptyStack(s)) return NULL;
+    return s->elems[s->last - 1];
+}
+
+void popStack(Stack s) {
+    if (!emptyStack(s)) {
+        s->last--;
+    }
+}
+
 --------------------------------------------------
 Path: ./src/processTree.h
 Contents:
@@ -165,6 +219,67 @@ void deleteTree(Tree node);
 void printExpression(Tree node);
 
 
+--------------------------------------------------
+Path: ./src/queue.c
+Contents:
+#include "queue.h"
+#include <stdlib.h>
+#include <string.h>
+
+#define INITIAL_CAPACITY 16
+
+Queue createQueue() {
+    Queue q = malloc(sizeof(_Queue));
+    q->capacity = INITIAL_CAPACITY;
+    q->elems     = malloc(sizeof(QUEUE_T) * q->capacity);
+    q->first     = 0;
+    q->last      = 0;
+    q->length    = 0;
+    return q;
+}
+
+void destroyQueue(Queue q) {
+    free(q->elems);
+    free(q);
+}
+
+bool emptyQueue(Queue q) {
+    return q->length == 0;
+}
+
+int lengthQueue(Queue q) {
+    return q->length;
+}
+
+void pushQueue(Queue q, QUEUE_T t) {
+    if (q->length == q->capacity) {
+        int newCap = q->capacity * 2;
+        QUEUE_T *newArr = malloc(sizeof(QUEUE_T) * newCap);
+        for (int i = 0; i < q->length; i++) {
+            newArr[i] = q->elems[(q->first + i) % q->capacity];
+        }
+        free(q->elems);
+        q->elems   = newArr;
+        q->capacity = newCap;
+        q->first    = 0;
+        q->last     = q->length;
+    }
+    q->elems[q->last] = t;
+    q->last = (q->last + 1) % q->capacity;
+    q->length++;
+}
+
+QUEUE_T frontQueue(Queue q) {
+    if (emptyQueue(q)) return NULL;
+    return q->elems[q->first];
+}
+
+void popQueue(Queue q) {
+    if (emptyQueue(q)) return;
+    q->first = (q->first + 1) % q->capacity;
+    q->length--;
+}
+
 --------------------------------------------------
 Path: ./src/treeBuilder.c
 Contents:
@@ -227,6 +342,9 @@ int main() {
 --------------------------------------------------
 Path: ./src/processTree.c
 Contents:
+Path: ./src/processTree.c
+Contents:
+#include <stdlib.h>      // для malloc/free
 #include "processTree.h"
 #include "token.h"
 #include "stackTree.h"
@@ -243,74 +361,130 @@ void classify(Tree root, StackTree nums, StackTree other) {
         return;
     }
 
-    // ...
-
+    // рекурсивно обходим дерево
     classify(root->left, nums, other);
     classify(root->right, nums, other);
 }
 
 Tree processTree(Tree root) {
+    if (root == NULL) return NULL;
     if (root->type == NUM || root->type == VAR) {
         return root;
     }
 
+    // 1) Дистрибутивность: VAR * (X - Y)
+    if (root->content[0] == '*') {
+        Tree A = root->left;
+        Tree B = root->right;
+        // VAR * (X - Y)
+        if (A->type == VAR && B->type == OP && B->content[0] == '-') {
+            // копии переменной
+            Tree v1 = createNode(VAR, A->content);
+            Tree v2 = createNode(VAR, A->content);
+            Tree L = processTree(B->left);
+            Tree R = processTree(B->right);
+            // (v1 * L)
+            Tree M1 = createNode(OP, "*");
+            M1->left  = v1;
+            M1->right = L;
+            // (v2 * R)
+            Tree M2 = createNode(OP, "*");
+            M2->left  = v2;
+            M2->right = R;
+            // (M1 - M2)
+            Tree D = createNode(OP, "-");
+            D->left  = M1;
+            D->right = M2;
+            // освобождаем старые узлы
+            deleteTree(A);
+            deleteTree(B);
+            free(root);
+            return D;
+        }
+        // (X - Y) * VAR
+        if (B->type == VAR && A->type == OP && A->content[0] == '-') {
+            Tree v1 = createNode(VAR, B->content);
+            Tree v2 = createNode(VAR, B->content);
+            Tree L = processTree(A->left);
+            Tree R = processTree(A->right);
+            Tree M1 = createNode(OP, "*");
+            M1->left  = L;
+            M1->right = v1;
+            Tree M2 = createNode(OP, "*");
+            M2->left  = R;
+            M2->right = v2;
+            Tree D = createNode(OP, "-");
+            D->left  = M1;
+            D->right = M2;
+            deleteTree(B);
+            deleteTree(A);
+            free(root);
+            return D;
+        }
+    }
+
+    // 2) Если не дистрибутивный случай, обрабатываем ветви
+    root->left  = processTree(root->left);
+    root->right = processTree(root->right);
+
+    // 3) Если это не умножение — возвращаем как есть
     if (root->content[0] != '*') {
-        root->left = processTree(root->left);
-        root->right = processTree(root->right);
         return root;
     }
 
-    StackTree nums = createStackTree();
+    // 4) Свёртка констант и ассоциативное объединение остальных множителей
+    StackTree nums  = createStackTree();
     StackTree other = createStackTree();
 
     classify(root, nums, other);
 
+    // перемножаем все числовые константы
     int factor = 1;
     while (!emptyStackTree(nums)) {
-        factor *= atoi(topStackTree(nums)->content);
-        deleteTree(topStackTree(nums));
+        Tree t = topStackTree(nums);
+        factor *= atoi(t->content);
+        deleteTree(t);
         popStackTree(nums);
     }
-    
-    Tree otherProduct = NULL;
 
+    // собираем «остальные» множители в одно дерево
+    Tree otherProduct = NULL;
     while (!emptyStackTree(other)) {
-        Tree top = topStackTree(other);
-        // тут оставлена ошибка, найдите ее
+        Tree t = topStackTree(other);
         popStackTree(other);
-
         if (otherProduct == NULL) {
-            otherProduct = top;
+            otherProduct = t;
         } else {
             Tree node = createNode(OP, "*");
-            node->left = otherProduct;
-            node->right = top;
+            node->left  = otherProduct;
+            node->right = t;
             otherProduct = node;
         }
     }
 
     destroyStackTree(nums);
     destroyStackTree(other);
-    
-    char str[16];
-    sprintf(str, "%d", factor);
-    
-    Tree factorNode = createNode(NUM, str);
 
+    // создаём узел с итоговым числовым множителем
+    char buf[16];
+    sprintf(buf, "%d", factor);
+    Tree factorNode = createNode(NUM, buf);
+
+    // если нет других множителей — просто возвращаем число
     if (otherProduct == NULL) {
         return factorNode;
     }
-
+    // если множитель оказался 1 — возвращаем только остальные
     if (factor == 1) {
         return otherProduct;
     }
-
-    Tree node = createNode(OP, "*");
-    node->left = factorNode;
-    node->right = otherProduct;
-    
-    return node;
+    // иначе — создаём вершину умножения
+    Tree result = createNode(OP, "*");
+    result->left  = factorNode;
+    result->right = otherProduct;
+    return result;
 }
+
 --------------------------------------------------
 Path: ./src/stack.h
 Contents:
@@ -339,29 +513,77 @@ Path: ./src/operations.c
 Contents:
 #include "operations.h"
 
+// Приоритеты операций: + и - — 1, * и / — 2, всё остальное — 0
 int opPriority(char operation) {
-    switch (operation) {
-    case '+':
-        return 1;
+        switch (operation) {
+            case '+': case '-': return 1;
+            case '*': case '/': return 2;
+            default:            return 0;
+        }
+    }
+    
+    // Коммутативность: + и * — коммутативны, - и / — нет
+bool opCommut(char operation) {
+        switch (operation) {
+            case '+': case '*': return true;
+            case '-': case '/': return false;
+            default:            return false;
+        }
+    }
+--------------------------------------------------
+Path: ./src/stackTree.c
+Contents:
+#include "stackTree.h"
+#include <stdlib.h>
 
-    case '*':
-        return 2;
+#define INITIAL_CAPACITY 16
 
-    // ...
-    }
+StackTree createStackTree() {
+    StackTree s = malloc(sizeof(_StackTree));
+    s->capacity = INITIAL_CAPACITY;
+    s->elems    = malloc(sizeof(STACK_TREE_T) * s->capacity);
+    s->last     = 0;
+    return s;
 }
 
-bool opCommut(char operation) {
-    switch (operation) {
-    case '+':
-        return true;
+void destroyStackTree(StackTree s) {
+    free(s->elems);
+    free(s);
+}
 
-    case '-':
-        return false;
+bool emptyStackTree(StackTree s) {
+    return s->last == 0;
+}
 
-    // ...
+int depthStackTree(StackTree s) {
+    return s->last;
+}
+
+void pushStackTree(StackTree s, STACK_TREE_T t) {
+    if (s->last == s->capacity) {
+        int newCap = s->capacity * 2;
+        STACK_TREE_T *newArr = malloc(sizeof(STACK_TREE_T) * newCap);
+        for (int i = 0; i < s->capacity; i++) {
+            newArr[i] = s->elems[i];
+        }
+        free(s->elems);
+        s->elems    = newArr;
+        s->capacity = newCap;
+    }
+    s->elems[s->last++] = t;
+}
+
+STACK_TREE_T topStackTree(StackTree s) {
+    if (emptyStackTree(s)) return NULL;
+    return s->elems[s->last - 1];
+}
+
+void popStackTree(StackTree s) {
+    if (!emptyStackTree(s)) {
+        s->last--;
     }
 }
+
 --------------------------------------------------
 Path: ./src/lexer.h
 Contents:
@@ -431,5 +653,38 @@ void popQueue(Queue q);
 Path: ./src/tree.c
 Contents:
 #include "tree.h"
+#include "tree.h"
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+
+Tree createNode(TokenType type, char *content) {
+    Tree node = malloc(sizeof(_Node));
+    node->type = type;
+    strcpy(node->content, content);
+    node->left = node->right = NULL;
+    return node;
+}
+
+void deleteTree(Tree node) {
+    if (!node) return;
+    deleteTree(node->left);
+    deleteTree(node->right);
+    free(node);
+}
+
+void printExpression(Tree node) {
+    if (!node) return;
+    // для операторов: (левый   оп   правый)
+    if (node->type == OP) {
+        printf("(");
+        printExpression(node->left);
+        printf("%s", node->content);
+        printExpression(node->right);
+        printf(")");
+    } else {
+        printf("%s", node->content);
+    }
+}
 
 --------------------------------------------------
diff --git a/lab3/lab8/src/app.out b/lab3/lab8/src/app.out
new file mode 100755
index 0000000..85d3dbc
Binary files /dev/null and b/lab3/lab8/src/app.out differ
diff --git a/lab3/lab8/src/lexer.c b/lab3/lab8/src/lexer.c
index 86d7772..0758463 100644
--- a/lab3/lab8/src/lexer.c
+++ b/lab3/lab8/src/lexer.c
@@ -1,36 +1,57 @@
-#include "lexer.h"
 
-typedef enum State {
-    INIT,
-    END,
-    // ...
-} State;
+#include "lexer.h"
+#include "token.h"
+#include <ctype.h>
+#include <string.h>
 
+// Простейший лексер: числа, переменные, скобки, операторы + - * /
+// Останавливается по ‘=’, ‘\n’ или концу строки
 Queue tokenize(char *expr) {
     Queue out = createQueue();
-
     int i = 0;
-    State st = INIT;
-
-    char numBuf[16];
-    int bufPos = 0;
-
-    while (st != END) {
-        if (st == INIT) {
-            char letter = expr[i];
-            
-            if ('a' <= letter && letter <= 'z') {
-                char c[2];
-                c[0] = letter;
-                c[1] = '\0';
-
-                pushQueue(out, createToken(c, VAR));
-                i++;
+    while (expr[i] != '\0' && expr[i] != '\n' && expr[i] != '=') {
+        char c = expr[i];
+        if (isspace((unsigned char)c)) {
+            // пропускаем пробелы
+            i++;
+        }
+        else if (isdigit((unsigned char)c) || (c == '.' && isdigit((unsigned char)expr[i+1]))) {
+            // число (целое или дробное)
+            char buf[16];
+            int j = 0;
+            while ((isdigit((unsigned char)expr[i]) || expr[i] == '.') && j < 15) {
+                buf[j++] = expr[i++];
             }
-
-            // ...
-        } 
+            buf[j] = '\0';
+            pushQueue(out, createToken(buf, NUM));
+        }
+        else if (isalpha((unsigned char)c)) {
+            // переменная: буквы и цифры
+            char buf[16];
+            int j = 0;
+            while ((isalpha((unsigned char)expr[i]) || isdigit((unsigned char)expr[i])) && j < 15) {
+                buf[j++] = expr[i++];
+            }
+            buf[j] = '\0';
+            pushQueue(out, createToken(buf, VAR));
+        }
+        else if (c == '(') {
+            pushQueue(out, createToken("(", BR_OPEN));
+            i++;
+        }
+        else if (c == ')') {
+            pushQueue(out, createToken(")", BR_CLOSE));
+            i++;
+        }
+        else if (c == '+' || c == '-' || c == '*' || c == '/') {
+            char op[2] = { c, '\0' };
+            pushQueue(out, createToken(op, OP));
+            i++;
+        }
+        else {
+            // игнорируем всё прочее
+            i++;
+        }
     }
-
     return out;
-}
\ No newline at end of file
+}
diff --git a/lab3/lab8/src/lexer.o b/lab3/lab8/src/lexer.o
new file mode 100644
index 0000000..b61985f
Binary files /dev/null and b/lab3/lab8/src/lexer.o differ
diff --git a/lab3/lab8/src/main.c b/lab3/lab8/src/main.c
index 7b79ceb..7bade63 100644
--- a/lab3/lab8/src/main.c
+++ b/lab3/lab8/src/main.c
@@ -14,15 +14,33 @@ void printTree(Tree tree, int offset) {
     printTree(tree->left, offset + 1);
 }
 
+void printTokens(Queue q) {
+    printf("TOKENIZED:");
+    while (!emptyQueue(q)) {
+        Token t = frontQueue(q);
+        if (!t) break;
+        printf(" %s", t->content);
+        popQueue(q);
+    }
+    printf("\n");
+}
+
 int main() {
     char expr[64];
     fgets(expr, sizeof(expr), stdin);
+    printf("INPUT: %s\n", expr);
 
     Queue infix = tokenize(expr);
+    //printf("TOKENIZED: ");
+    //printTokens(infix); 
 
+    printf("\n");
+    printf("BUILDING TREE: \n");
     Tree tree = buildTree(infix);
 
     printTree(tree, 0);
+    printf("\n");
+    printf("PROCESSING TREE: \n");
 
     tree = processTree(tree);
 
diff --git a/lab3/lab8/src/main.o b/lab3/lab8/src/main.o
new file mode 100644
index 0000000..295fcfd
Binary files /dev/null and b/lab3/lab8/src/main.o differ
diff --git a/lab3/lab8/src/operations.c b/lab3/lab8/src/operations.c
index 32a4753..335e21c 100644
--- a/lab3/lab8/src/operations.c
+++ b/lab3/lab8/src/operations.c
@@ -1,25 +1,19 @@
 #include "operations.h"
 
+// Приоритеты операций: + и - — 1, * и / — 2, всё остальное — 0
 int opPriority(char operation) {
-    switch (operation) {
-    case '+':
-        return 1;
-
-    case '*':
-        return 2;
-
-    // ...
+        switch (operation) {
+            case '+': case '-': return 1;
+            case '*': case '/': return 2;
+            default:            return 0;
+        }
     }
-}
-
+    
+    // Коммутативность: + и * — коммутативны, - и / — нет
 bool opCommut(char operation) {
-    switch (operation) {
-    case '+':
-        return true;
-
-    case '-':
-        return false;
-
-    // ...
-    }
-}
\ No newline at end of file
+        switch (operation) {
+            case '+': case '*': return true;
+            case '-': case '/': return false;
+            default:            return false;
+        }
+    }
\ No newline at end of file
diff --git a/lab3/lab8/src/operations.o b/lab3/lab8/src/operations.o
index 6e8f0ff..e4f66a3 100644
Binary files a/lab3/lab8/src/operations.o and b/lab3/lab8/src/operations.o differ
diff --git a/lab3/lab8/src/processTree.c b/lab3/lab8/src/processTree.c
index 21821c9..fc2a043 100644
--- a/lab3/lab8/src/processTree.c
+++ b/lab3/lab8/src/processTree.c
@@ -1,84 +1,165 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
 #include "processTree.h"
+#include "tree.h"
 #include "token.h"
 #include "stackTree.h"
-#include <stdio.h>
 
-void classify(Tree root, StackTree nums, StackTree other) {
+// Классификация множителей: числа — в nums, всё остальное — в others
+static void classify(Tree root, StackTree nums, StackTree others) {
+    if (!root) return;
     if (root->type == NUM) {
         pushStackTree(nums, root);
-        return;
-    }
-
-    if (root->type == VAR) {
-        pushStackTree(other, root);
-        return;
+    } else if (root->type == VAR) {
+        pushStackTree(others, root);
+    } else {
+        classify(root->left,  nums, others);
+        classify(root->right, nums, others);
     }
-
-    // ...
-
-    classify(root->left, nums, other);
-    classify(root->right, nums, other);
 }
 
-Tree processTree(Tree root) {
-    if (root->type == NUM || root->type == VAR) {
-        return root;
+// Строим дерево ассоциативного произведения из оставшихся factors в others и числового множителя factor
+static Tree buildProduct(StackTree others, int factor) {
+    Tree prod = NULL;
+    // собираем дерево из прочих множителей
+    while (!emptyStackTree(others)) {
+        Tree t = topStackTree(others);
+        popStackTree(others);
+        if (!prod) {
+            prod = t;
+        } else {
+            Tree node = createNode(OP, "*");
+            node->left  = prod;
+            node->right = t;
+            prod = node;
+        }
+    }
+    // если числовой множитель не равен 1, добавляем его
+    if (factor != 1) {
+        char buf[16];
+        sprintf(buf, "%d", factor);
+        Tree fnode = createNode(NUM, buf);
+        if (!prod) return fnode;
+        Tree node = createNode(OP, "*");
+        node->left  = fnode;
+        node->right = prod;
+        prod = node;
+    }
+    // если ничего не осталось — возвращаем 1
+    if (!prod) {
+        return createNode(NUM, "1");
     }
+    return prod;
+}
 
-    if (root->content[0] != '*') {
-        root->left = processTree(root->left);
-        root->right = processTree(root->right);
+// Упрощение одного узла: свёртка +/-, дистрибуция и упрощение *
+static Tree simplifyNode(Tree root) {
+    if (!root || root->type != OP) 
         return root;
-    }
 
-    StackTree nums = createStackTree();
-    StackTree other = createStackTree();
+    char op = root->content[0];
+    Tree L = root->left, R = root->right;
 
-    classify(root, nums, other);
+    // 1) Свертка констант в + и -
+    if ((op == '+' || op == '-') && L && R 
+        && L->type == NUM && R->type == NUM) {
+        int a = atoi(L->content);
+        int b = atoi(R->content);
+        int c = (op == '+') ? (a + b) : (a - b);
+        char buf[16];
+        sprintf(buf, "%d", c);
+        deleteTree(L);
+        deleteTree(R);
+        free(root);
+        return createNode(NUM, buf);
+    }
 
-    int factor = 1;
-    while (!emptyStackTree(nums)) {
-        factor *= atoi(topStackTree(nums)->content);
-        deleteTree(topStackTree(nums));
-        popStackTree(nums);
+    // 2) Дистрибуция VAR*(A-B) и (A-B)*VAR
+    if (op == '*') {
+        // x * (A - B)
+        if (L && L->type == VAR && R && R->type == OP && R->content[0] == '-') {
+            Tree A = R->left;
+            Tree B = R->right;
+            // x*A
+            Tree m1 = createNode(OP, "*");
+            m1->left  = createNode(VAR, L->content);
+            m1->right = processTree(A);
+            // x*B
+            Tree m2 = createNode(OP, "*");
+            m2->left  = createNode(VAR, L->content);
+            m2->right = processTree(B);
+            // (x*A)-(x*B)
+            Tree d = createNode(OP, "-");
+            d->left  = processTree(m1);
+            d->right = processTree(m2);
+            free(R);
+            free(root);
+            return d;
+        }
+        // (A - B) * x
+        if (R && R->type == VAR && L && L->type == OP && L->content[0] == '-') {
+            Tree A = L->left;
+            Tree B = L->right;
+            Tree m1 = createNode(OP, "*");
+            m1->left  = processTree(A);
+            m1->right = createNode(VAR, R->content);
+            Tree m2 = createNode(OP, "*");
+            m2->left  = processTree(B);
+            m2->right = createNode(VAR, R->content);
+            Tree d = createNode(OP, "-");
+            d->left  = processTree(m1);
+            d->right = processTree(m2);
+            free(L);
+            free(root);
+            return d;
+        }
     }
-    
-    Tree otherProduct = NULL;
 
-    while (!emptyStackTree(other)) {
-        Tree top = topStackTree(other);
-        // тут оставлена ошибка, найдите ее
-        popStackTree(other);
+    // 3) Упрощение умножения: свёртка констант, удаление 0 и 1
+    if (op == '*') {
+        StackTree nums   = createStackTree();
+        StackTree others = createStackTree();
+        classify(root, nums, others);
 
-        if (otherProduct == NULL) {
-            otherProduct = top;
-        } else {
-            Tree node = createNode(OP, "*");
-            node->left = otherProduct;
-            node->right = top;
-            otherProduct = node;
+        int factor = 1;
+        bool hasZero = false;
+        // перемножаем константы
+        while (!emptyStackTree(nums)) {
+            Tree t = topStackTree(nums);
+            popStackTree(nums);
+            int v = atoi(t->content);
+            if (v == 0) hasZero = true;
+            else factor *= v;
+            deleteTree(t);
         }
-    }
+        destroyStackTree(nums);
 
-    destroyStackTree(nums);
-    destroyStackTree(other);
-    
-    char str[16];
-    sprintf(str, "%d", factor);
-    
-    Tree factorNode = createNode(NUM, str);
+        // если был ноль — всё подмножается в 0
+        if (hasZero) {
+            deleteTree(L);
+            deleteTree(R);
+            free(root);
+            destroyStackTree(others);
+            return createNode(NUM, "0");
+        }
 
-    if (otherProduct == NULL) {
-        return factorNode;
+        // собираем оставшиеся множители + числовой factor
+        Tree prod = buildProduct(others, factor);
+        destroyStackTree(others);
+        free(root);
+        return prod;
     }
 
-    if (factor == 1) {
-        return otherProduct;
-    }
+    // ничего не поменялось
+    return root;
+}
 
-    Tree node = createNode(OP, "*");
-    node->left = factorNode;
-    node->right = otherProduct;
-    
-    return node;
-}
\ No newline at end of file
+Tree processTree(Tree root) {
+    if (!root) return NULL;
+    // сначала рекурсивно упрощаем детей
+    root->left  = processTree(root->left);
+    root->right = processTree(root->right);
+    // затем пытаемся упростить текущий узел
+    return simplifyNode(root);
+}
diff --git a/lab3/lab8/src/processTree.o b/lab3/lab8/src/processTree.o
new file mode 100644
index 0000000..1c3da0b
Binary files /dev/null and b/lab3/lab8/src/processTree.o differ
diff --git a/lab3/lab8/src/queue.c b/lab3/lab8/src/queue.c
new file mode 100644
index 0000000..010560f
--- /dev/null
+++ b/lab3/lab8/src/queue.c
@@ -0,0 +1,57 @@
+#include "queue.h"
+#include <stdlib.h>
+#include <string.h>
+
+#define INITIAL_CAPACITY 16
+
+Queue createQueue() {
+    Queue q = malloc(sizeof(_Queue));
+    q->capacity = INITIAL_CAPACITY;
+    q->elems     = malloc(sizeof(QUEUE_T) * q->capacity);
+    q->first     = 0;
+    q->last      = 0;
+    q->length    = 0;
+    return q;
+}
+
+void destroyQueue(Queue q) {
+    free(q->elems);
+    free(q);
+}
+
+bool emptyQueue(Queue q) {
+    return q->length == 0;
+}
+
+int lengthQueue(Queue q) {
+    return q->length;
+}
+
+void pushQueue(Queue q, QUEUE_T t) {
+    if (q->length == q->capacity) {
+        int newCap = q->capacity * 2;
+        QUEUE_T *newArr = malloc(sizeof(QUEUE_T) * newCap);
+        for (int i = 0; i < q->length; i++) {
+            newArr[i] = q->elems[(q->first + i) % q->capacity];
+        }
+        free(q->elems);
+        q->elems   = newArr;
+        q->capacity = newCap;
+        q->first    = 0;
+        q->last     = q->length;
+    }
+    q->elems[q->last] = t;
+    q->last = (q->last + 1) % q->capacity;
+    q->length++;
+}
+
+QUEUE_T frontQueue(Queue q) {
+    if (emptyQueue(q)) return NULL;
+    return q->elems[q->first];
+}
+
+void popQueue(Queue q) {
+    if (emptyQueue(q)) return;
+    q->first = (q->first + 1) % q->capacity;
+    q->length--;
+}
diff --git a/lab3/lab8/src/queue.o b/lab3/lab8/src/queue.o
new file mode 100644
index 0000000..baf0d4b
Binary files /dev/null and b/lab3/lab8/src/queue.o differ
diff --git a/lab3/lab8/src/stack.c b/lab3/lab8/src/stack.c
new file mode 100644
index 0000000..0f7e39a
--- /dev/null
+++ b/lab3/lab8/src/stack.c
@@ -0,0 +1,50 @@
+#include "stack.h"
+#include <stdlib.h>
+
+#define INITIAL_CAPACITY 16
+
+Stack createStack() {
+    Stack s = malloc(sizeof(_Stack));
+    s->capacity = INITIAL_CAPACITY;
+    s->elems    = malloc(sizeof(STACK_T) * s->capacity);
+    s->last     = 0;
+    return s;
+}
+
+void destroyStack(Stack s) {
+    free(s->elems);
+    free(s);
+}
+
+bool emptyStack(Stack s) {
+    return s->last == 0;
+}
+
+int depthStack(Stack s) {
+    return s->last;
+}
+
+void pushStack(Stack s, STACK_T t) {
+    if (s->last == s->capacity) {
+        int newCap = s->capacity * 2;
+        STACK_T *newArr = malloc(sizeof(STACK_T) * newCap);
+        for (int i = 0; i < s->capacity; i++) {
+            newArr[i] = s->elems[i];
+        }
+        free(s->elems);
+        s->elems    = newArr;
+        s->capacity = newCap;
+    }
+    s->elems[s->last++] = t;
+}
+
+STACK_T topStack(Stack s) {
+    if (emptyStack(s)) return NULL;
+    return s->elems[s->last - 1];
+}
+
+void popStack(Stack s) {
+    if (!emptyStack(s)) {
+        s->last--;
+    }
+}
diff --git a/lab3/lab8/src/stack.o b/lab3/lab8/src/stack.o
new file mode 100644
index 0000000..ade5821
Binary files /dev/null and b/lab3/lab8/src/stack.o differ
diff --git a/lab3/lab8/src/stackTree.c b/lab3/lab8/src/stackTree.c
new file mode 100644
index 0000000..4db8b46
--- /dev/null
+++ b/lab3/lab8/src/stackTree.c
@@ -0,0 +1,50 @@
+#include "stackTree.h"
+#include <stdlib.h>
+
+#define INITIAL_CAPACITY 16
+
+StackTree createStackTree() {
+    StackTree s = malloc(sizeof(_StackTree));
+    s->capacity = INITIAL_CAPACITY;
+    s->elems    = malloc(sizeof(STACK_TREE_T) * s->capacity);
+    s->last     = 0;
+    return s;
+}
+
+void destroyStackTree(StackTree s) {
+    free(s->elems);
+    free(s);
+}
+
+bool emptyStackTree(StackTree s) {
+    return s->last == 0;
+}
+
+int depthStackTree(StackTree s) {
+    return s->last;
+}
+
+void pushStackTree(StackTree s, STACK_TREE_T t) {
+    if (s->last == s->capacity) {
+        int newCap = s->capacity * 2;
+        STACK_TREE_T *newArr = malloc(sizeof(STACK_TREE_T) * newCap);
+        for (int i = 0; i < s->capacity; i++) {
+            newArr[i] = s->elems[i];
+        }
+        free(s->elems);
+        s->elems    = newArr;
+        s->capacity = newCap;
+    }
+    s->elems[s->last++] = t;
+}
+
+STACK_TREE_T topStackTree(StackTree s) {
+    if (emptyStackTree(s)) return NULL;
+    return s->elems[s->last - 1];
+}
+
+void popStackTree(StackTree s) {
+    if (!emptyStackTree(s)) {
+        s->last--;
+    }
+}
diff --git a/lab3/lab8/src/stackTree.o b/lab3/lab8/src/stackTree.o
new file mode 100644
index 0000000..1464458
Binary files /dev/null and b/lab3/lab8/src/stackTree.o differ
diff --git a/lab3/lab8/src/token.h b/lab3/lab8/src/token.h
index 25556a3..d348561 100644
--- a/lab3/lab8/src/token.h
+++ b/lab3/lab8/src/token.h
@@ -6,6 +6,8 @@ typedef enum TokenType {
     NUM,
     VAR,
     BR_OPEN,
+    OP,
+    BR_CLOSE,
     // ...
 } TokenType;
 
diff --git a/lab3/lab8/src/tree.c b/lab3/lab8/src/tree.c
index bc9531c..751ea48 100644
--- a/lab3/lab8/src/tree.c
+++ b/lab3/lab8/src/tree.c
@@ -1 +1,34 @@
 #include "tree.h"
+#include "tree.h"
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+
+Tree createNode(TokenType type, char *content) {
+    Tree node = malloc(sizeof(_Node));
+    node->type = type;
+    strcpy(node->content, content);
+    node->left = node->right = NULL;
+    return node;
+}
+
+void deleteTree(Tree node) {
+    if (!node) return;
+    deleteTree(node->left);
+    deleteTree(node->right);
+    free(node);
+}
+
+void printExpression(Tree node) {
+    if (!node) return;
+    // для операторов: (левый   оп   правый)
+    if (node->type == OP) {
+        printf("(");
+        printExpression(node->left);
+        printf("%s", node->content);
+        printExpression(node->right);
+        printf(")");
+    } else {
+        printf("%s", node->content);
+    }
+}
diff --git a/lab3/lab8/src/tree.o b/lab3/lab8/src/tree.o
index efd62a4..6c404f6 100644
Binary files a/lab3/lab8/src/tree.o and b/lab3/lab8/src/tree.o differ
diff --git a/lab3/lab8/src/treeBuilder.c b/lab3/lab8/src/treeBuilder.c
index fd5fad7..0ed73c7 100644
--- a/lab3/lab8/src/treeBuilder.c
+++ b/lab3/lab8/src/treeBuilder.c
@@ -1,13 +1,97 @@
+// File: src/treeBuilder.c
 #include "treeBuilder.h"
 #include "operations.h"
-#include <stdio.h>
+#include <stdlib.h>
 
+// Перевод инфиксной очереди токенов в постфиксную (алгоритм Шантинга-Ярдена)
 Queue toPostfix(Queue infix) {
-    // ...
+    Queue output = createQueue();
+    Stack ops = createStack();
+    while (!emptyQueue(infix)) {
+        Token t = frontQueue(infix);
+        popQueue(infix);
+        switch (t->type) {
+            case NUM:
+            case VAR:
+                pushQueue(output, t);
+                break;
+            case OP: {
+                char cur = t->content[0];
+                // пока на вершине стека оператор с >= приоритетом
+                while (!emptyStack(ops) && topStack(ops)->type == OP) {
+                    char topc = topStack(ops)->content[0];
+                    if (opPriority(topc) >= opPriority(cur)) {
+                        pushQueue(output, topStack(ops));
+                        popStack(ops);
+                    } else break;
+                }
+                pushStack(ops, t);
+                break;
+            }
+            case BR_OPEN:
+                pushStack(ops, t);
+                break;
+            case BR_CLOSE:
+                // сбрасываем до открывающей скобки
+                while (!emptyStack(ops) && topStack(ops)->type != BR_OPEN) {
+                    pushQueue(output, topStack(ops));
+                    popStack(ops);
+                }
+                if (!emptyStack(ops) && topStack(ops)->type == BR_OPEN) {
+                    deleteToken(topStack(ops));
+                    popStack(ops);
+                }
+                deleteToken(t);
+                break;
+            default:
+                // прочие токены отбрасываем
+                deleteToken(t);
+        }
+    }
+    // оставшиеся операторы
+    while (!emptyStack(ops)) {
+        Token u = topStack(ops);
+        popStack(ops);
+        if (u->type != BR_OPEN) pushQueue(output, u);
+        else deleteToken(u);
+    }
+    destroyStack(ops);
+    destroyQueue(infix);
+    return output;
 }
 
+// Построение дерева из постфиксной очереди
 Tree buildTree(Queue infix) {
     Queue postfix = toPostfix(infix);
-
-    // ...
-}
\ No newline at end of file
+    StackTree st = createStackTree();
+    while (!emptyQueue(postfix)) {
+        Token t = frontQueue(postfix);
+        popQueue(postfix);
+        if (t->type == NUM || t->type == VAR) {
+            Tree leaf = createNode(t->type, t->content);
+            pushStackTree(st, leaf);
+            deleteToken(t);
+        }
+        else if (t->type == OP) {
+            // два операнда
+            Tree right = topStackTree(st); popStackTree(st);
+            Tree left  = topStackTree(st); popStackTree(st);
+            Tree node  = createNode(OP, t->content);
+            node->left  = left;
+            node->right = right;
+            pushStackTree(st, node);
+            deleteToken(t);
+        }
+        else {
+            deleteToken(t);
+        }
+    }
+    destroyQueue(postfix);
+    Tree result = NULL;
+    if (!emptyStackTree(st)) {
+        result = topStackTree(st);
+        popStackTree(st);
+    }
+    destroyStackTree(st);
+    return result;
+}
diff --git a/lab3/lab8/src/treeBuilder.o b/lab3/lab8/src/treeBuilder.o
new file mode 100644
index 0000000..96add09
Binary files /dev/null and b/lab3/lab8/src/treeBuilder.o differ
diff --git a/lab3/test.txt b/lab3/test.txt
new file mode 100644
index 0000000..a80cf42
--- /dev/null
+++ b/lab3/test.txt
@@ -0,0 +1,7 @@
+x * (5 - a)
+x * ( 5 - y * ( a - b) )
+x * 5 * 6
+x * ( 7 - 3 - a)
+2 * x - 3 * x
+x * (y * (7 - a))
+3 + 2
